apply plugin: "distribution"

ext {
  nexusBaseUrl  = 'https://nexus.adaptris.net'
  log4j2Version='2.13.0'
  slf4jVersion='1.7.30'
  interlokVersion = project.hasProperty('interlokVersion') ? project.getProperty('interlokVersion') : '3.9.3-RELEASE'
  interlokUiVersion = project.hasProperty('interlokUiVersion') ? project.getProperty('interlokUiVersion') : interlokVersion
  interlokSourceConfig = "${projectDir}/src/main/interlok/config"
  interlokTmpConfigDirectory = "${buildDir}/tmp/config"
  interlokTmpLibDirectory = "${buildDir}/tmp/lib"
  interlokTmpWarDirectory = "${buildDir}/tmp/war"
  interlokDistDirectory = project.hasProperty('interlokDistDirectory') ? project.getProperty('interlokDistDirectory') :  "${buildDir}/distribution"
  buildEnv = project.hasProperty('buildEnv') ? project.getProperty('buildEnv') : 'NoBuildEnv'
  includeWar = project.hasProperty('includeWar') ? project.getProperty('includeWar') : 'false'
}

ext.buildDetails = [
  isDevMode: { ->
    return buildEnv.equals("dev")
  },

  isIncludeWar: { ->
    return includeWar.equals("true") || buildEnv.equals("dev")
  }
]

def asFileUrl(filepath) {
  return "file:///" + new java.net.URI(null, filepath, null).toASCIIString();
}


def overwriteWithPropertiesTemplate(file, dir){
    if(new File("${dir}/${file}-${buildEnv}.properties").exists()){
        ant.copy(file: "${dir}/${file}-${buildEnv}.properties", tofile: "${dir}/${file}.properties", overwrite: 'true')
    }
    delete fileTree(dir) { include "${file}-*.properties" }
}

def overwriteWithTemplate(file, dir){
    if(new File("${dir}/${file}.${buildEnv}").exists()){
        ant.copy(file: "${dir}/${file}.${buildEnv}", tofile: "${dir}/${file}", overwrite: 'true')
    }
    delete fileTree(dir) { include "${file}.*" }
}

distTar.enabled=false
distZip.enabled=false

configurations {
    interlokRuntime{}
    interlokTestRuntime{}
    interlokJavadocs{}
    interlokVerify{}
    interlokWar{}
    antJunit{}
    all*.exclude group: 'c3p0'
    all*.exclude group: 'commons-logging'
    all*.exclude group: 'javamail'
    all*.exclude group: 'javax.mail', module: 'mail'
    all*.exclude group: 'org.glassfish.hk2.external'
    all*.exclude group: 'xalan', module: 'xalan'
    all*.exclude group: 'net.sf.saxon', module: 'saxon'
    all*.exclude group: 'org.codehaus.woodstox'
    all*.exclude group: 'com.fasterxml.woodstox'
    all*.exclude group: 'org.eclipse.jetty.orbit', module: 'javax.mail.glassfish'
    all*.exclude group: 'javax.el', module: 'javax.el-api'
    all*.exclude group: 'org.hibernate', module: 'hibernate-validator'
}


if (interlokVersion.endsWith("SNAPSHOT") || interlokUiVersion.endsWith("SNAPSHOT")) {
  allprojects {
    configurations.all {
      resolutionStrategy.cacheChangingModulesFor 0, "seconds"
    }
  }
}

repositories {
    mavenCentral()
    maven { url "${nexusBaseUrl}/nexus/content/groups/public" }
    maven { url "${nexusBaseUrl}/nexus/content/groups/interlok" }
}

dependencies {
  interlokRuntime ("com.adaptris:interlok-core:$interlokVersion") { changing= true}
  interlokRuntime ("com.adaptris:interlok-common:$interlokVersion") { changing= true}
  interlokRuntime ("com.adaptris:interlok-boot:$interlokVersion") { changing=true }
  interlokRuntime ("com.adaptris:interlok-logging:$interlokVersion") { changing=true }
  interlokRuntime ("com.adaptris:interlok-varsub:$interlokVersion") { changing=true }

  interlokRuntime ("org.slf4j:slf4j-api:$slf4jVersion")
  interlokRuntime ("org.slf4j:jcl-over-slf4j:$slf4jVersion")
  interlokRuntime ("org.slf4j:jul-to-slf4j:$slf4jVersion")
  interlokRuntime ("org.apache.logging.log4j:log4j-core:$log4j2Version")
  interlokRuntime ("org.apache.logging.log4j:log4j-1.2-api:$log4j2Version")
  interlokRuntime ("org.apache.logging.log4j:log4j-slf4j-impl:${log4j2Version}")
  interlokRuntime ("org.apache.logging.log4j:log4j-api:$log4j2Version")

  interlokTestRuntime ("com.adaptris:interlok-service-tester:$interlokVersion") { changing=true }
  interlokWar  ("com.adaptris.ui:interlok:$interlokUiVersion@war") {changing=true}

  interlokVerify files("$interlokTmpConfigDirectory"){
      builtBy 'localizeConfig'
  }
  interlokJavadocs group: "com.adaptris", name: "interlok-core", version: "$interlokVersion", classifier: "javadoc", changing: true, transitive: false
  interlokJavadocs group: "com.adaptris", name: "interlok-common", version: "$interlokVersion", classifier: "javadoc", changing: true, transitive: false

  antJunit ("org.apache.ant:ant-junit:1.10.7")
}

task localizeConfig(type: Copy) {
    from "${interlokSourceConfig}"
    into "${interlokTmpConfigDirectory}"
    doLast {
        overwriteWithTemplate("log4j2.xml", "${interlokTmpConfigDirectory}")
        overwriteWithPropertiesTemplate("variables-local", "${interlokTmpConfigDirectory}")
        ant.propertyfile(
            file: "${interlokTmpConfigDirectory}/version.properties") {
            entry( key: "build.version", value: "${version}")
            entry( key: "interlok.core.version", value: "${interlokVersion}")
            entry( key: "interlok.war.version", value: "${interlokUiVersion}")
        }
    }
}


tasks.register("verifyLauncherJar", Jar) {
    ext.verifyLauncherClasspath = { ->
      def verifyLibs = [configurations.interlokRuntime.collect { asFileUrl(it.getCanonicalPath()) }.join(' '),
              configurations.interlokVerify.collect { asFileUrl(it.getCanonicalPath()) + "/" }.join(' ')]
      return verifyLibs.join(' ')
    }
    appendix = "verify-launcher"
    manifest {
        attributes ("Class-Path": verifyLauncherClasspath())
    }
}

def interlokVersionReport = tasks.register("interlokVersionReport", JavaExec) {
    group = 'Verification'
    description = 'Show Interlok versions using -version'
    workingDir = new File("${buildDir}/tmp")
    classpath = files(verifyLauncherJar.archivePath)

    main = 'com.adaptris.core.management.SimpleBootstrap'
    args "-version"
}

interlokVersionReport.configure {
    dependsOn localizeConfig
    dependsOn verifyLauncherJar
}

def interlokVerify = tasks.register("interlokVerify", JavaExec) {
    group = 'Verification'
    description = 'Check if Interlok config is valid using -configtest'
    doFirst {
      if(new File("${projectDir}/src/test/resources/log4j2.xml").exists()) {
        ant.move file: "$interlokTmpConfigDirectory/log4j2.xml", tofile: "$interlokTmpConfigDirectory/log4j2.xml.bk"
        ant.copy file: "${projectDir}/src/test/resources/log4j2.xml", tofile: "$interlokTmpConfigDirectory/log4j2.xml"
      }
    }
    workingDir = new File("${buildDir}/tmp")
    classpath = files(verifyLauncherJar.archivePath)
    main = 'com.adaptris.core.management.SimpleBootstrap'
    args "-configtest"
    environment project.hasProperty('interlokVerifyEnvironmentProperties') ? project.getProperty('interlokVerifyEnvironmentProperties') : [:]
    systemProperties project.hasProperty('interlokVerifySystemProperties') ? project.getProperty('interlokVerifySystemProperties') : [:]

    doLast {
      if(new File("$interlokTmpConfigDirectory/log4j2.xml.bk").exists()) {
        ant.move file: "$interlokTmpConfigDirectory/log4j2.xml.bk", tofile: "$interlokTmpConfigDirectory/log4j2.xml"
      }
    }
}

interlokVerify.configure {
    dependsOn localizeConfig
    dependsOn verifyLauncherJar
}

tasks.register("serviceTesterLauncherJar", Jar) {
    appendix = "service-tester-launcher"
    ext.serviceTesterClasspath = { ->
      def testerLibs = [configurations.interlokRuntime.collect { asFileUrl(it.getCanonicalPath()) }.join(' '),
              configurations.interlokTestRuntime.collect { asFileUrl(it.getCanonicalPath()) }.join(' '),
              asFileUrl(new File("$projectDir/src/test/resources").getCanonicalPath()) + "/"]
      return testerLibs.join(' ')
    }
    manifest {
        attributes ("Class-Path": serviceTesterClasspath())
    }
}

def interlokServiceTest = tasks.register("interlokServiceTest", JavaExec) {
    group = 'Test'
    description = 'Execute Interlok service tests'
    onlyIf {
      new File("$projectDir/src/test/interlok/service-test.xml").exists()
    }
    main = 'com.adaptris.tester.runners.TestExecutor'
    classpath = files(serviceTesterLauncherJar.archivePath)
    args "-serviceTest"
    args "$projectDir/src/test/interlok/service-test.xml"
    args "-serviceTestOutput"
    args "$buildDir/reports/unit/"
}

interlokServiceTest.configure {
    dependsOn serviceTesterLauncherJar
    finalizedBy interlokServiceTestReport
}
task interlokServiceTestReport {
    group = 'Test'
    description = 'Create Interlok service test reports'
    onlyIf{
      interlokServiceTest.get().didWork
    }
    doLast {
      mkdir "$buildDir/reports/html"
      ant.taskdef(
        name: 'junitreport',
        classname: 'org.apache.tools.ant.taskdefs.optional.junit.XMLResultAggregator',
        classpath: configurations.antJunit.asPath
      )

      ant.junitreport(todir: "$buildDir/reports/html") {
        fileset(dir: "$buildDir/reports/unit", includes: 'TEST-*.xml')
        report(todir: "$buildDir/reports/html", format: "frames"	)
      }
    }
}


task serviceTesterDist(type: Copy) {
  onlyIf {
    buildDetails.isDevMode()
  }
  from project.configurations.interlokTestRuntime
  into interlokTmpLibDirectory
}


task interlokWarDist(type: Copy) {
  onlyIf {
    buildDetails.isIncludeWar()
  }
  from project.configurations.interlokWar
  into interlokTmpWarDirectory
}


distributions {
    main {
        contents {
            into('') {
                from ("src/main/interlok")
                exclude "config"
            }
            into('config') {
                from(localizeConfig)
            }
            into('lib') {
                from(project.configurations.interlokRuntime)
                from(serviceTesterDist)
            }
            into('webapps') {
                from(interlokWarDist)
            }
            into('docs/javadocs') {
              from(project.configurations.interlokJavadocs)
            }
            rename '(.*)-[0-9]+\\..*.jar', '$1.jar'
            rename '(.*)-[0-9]+\\..*.war', '$1.war'
            duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        }
    }
}

installDist {
    destinationDir = new File(interlokDistDirectory)
}

check.dependsOn interlokVerify,interlokServiceTest,interlokVersionReport
assemble.dependsOn installDist


