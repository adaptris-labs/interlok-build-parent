buildscript {
  repositories {
    maven { url 'https://plugins.gradle.org/m2/' }
  }
  dependencies {
    classpath 'org.owasp:dependency-check-gradle:6.0.2'
  }
}

apply plugin: org.owasp.dependencycheck.gradle.DependencyCheckPlugin
apply plugin: "distribution"

ext {
  localInterlokRepo = project.findProperty('localInterlokRepo') ?: 'unknown'
  nexusBaseUrl  = 'https://nexus.adaptris.net'
  log4j2Version='2.13.3'
  slf4jVersion='1.7.30'
  interlokVersion = project.findProperty('interlokVersion') ?: '3.11.0-RELEASE'
  interlokUiVersion = project.findProperty('interlokUiVersion') ?: interlokVersion
  interlokSourceConfig = "${projectDir}/src/main/interlok/config"
  interlokTmpConfigDirectory = "${buildDir}/tmp/config"
  interlokTmpLibDirectory = "${buildDir}/tmp/lib"
  interlokTmpWarDirectory = "${buildDir}/tmp/war"
  interlokTmpServiceTestLog4j = "${buildDir}/tmp/serviceTestLog4j/log4j2.xml"
  interlokDistDirectory = project.findProperty('interlokDistDirectory') ?: "${buildDir}/distribution"
  buildEnv = project.findProperty('buildEnv') ?: 'NoBuildEnv'
  includeWar = project.findProperty('includeWar') ?: 'false'
  additionalTemplatedConfiguration = project.findProperty('additionalTemplatedConfiguration') ?: []
  additionalTemplatedProperties = project.findProperty('additionalTemplatedProperties') ?: []
  interlokParentBaseUrl = project.findProperty('interlokParentBaseUrl') ?: 'https://raw.githubusercontent.com/adaptris-labs/interlok-build-parent/master'
  verifyLog4j = "${interlokParentBaseUrl}/verifyLog4j2.xml"
  serviceTestLog4j = "${interlokParentBaseUrl}/serviceTestLog4j2.xml"
  verifyMode  = project.hasProperty('verifyMode') ? VerifyModes.valueOf(project.getProperty('verifyMode')) : VerifyModes.WARN
  interlokVerifyTextReport = "${buildDir}/reports/interlok/verify/report.txt"
  interlokVerifySonarReport = "${buildDir}/reports/interlok/verify/report.json"
  interlokVerifyEnvironmentPropertiesFile = project.findProperty('interlokVerifyEnvironmentPropertiesFile') ?: "${projectDir}/.env"
}

enum VerifyModes {
  STRICT, WARN
}

defaultTasks 'clean', 'check'

ext.buildDetails = [
  isDevMode: { ->
    return buildEnv.equals("dev")
  },

  isIncludeWar: { ->
    return includeWar.equals("true") || buildEnv.equals("dev")
  }
]

def loadPropertiesFromFile(filepath) {
  Properties properties = new Properties()
  File propertiesFile = new File(filepath)
  if(propertiesFile.exists()){
    propertiesFile.withInputStream {
      properties.load(it)
    }
  }
  return properties
}

def asFileUrl(filepath) {
  return "file:///" + new java.net.URI(null, filepath, null).toASCIIString();
}


def overwriteWithPropertiesTemplate(file, dir){
    if(new File("${dir}/${file}-${buildEnv}.properties").exists()){
        ant.copy(file: "${dir}/${file}-${buildEnv}.properties", tofile: "${dir}/${file}.properties", overwrite: 'true')
    }
    delete fileTree(dir) { include "${file}-*.properties" }
}

def overwriteWithTemplate(file, dir){
    if(new File("${dir}/${file}.${buildEnv}").exists()){
        ant.copy(file: "${dir}/${file}.${buildEnv}", tofile: "${dir}/${file}", overwrite: 'true')
    }
    delete fileTree(dir) { include "${file}.*" }
}

distTar.enabled=false
distZip.enabled=false

configurations {
    interlokRuntime{}
    interlokTestRuntime{}
    interlokJavadocs{}
    interlokVerify{}
    interlokVerifyReport{}
    interlokWar{}
    antJunit{}
    all*.exclude group: 'c3p0'
    all*.exclude group: 'commons-logging'
    all*.exclude group: 'javamail'
    all*.exclude group: 'javax.mail', module: 'mail'
    all*.exclude group: 'org.glassfish.hk2.external'
    all*.exclude group: 'xalan', module: 'xalan'
    all*.exclude group: 'net.sf.saxon', module: 'saxon'
    // Exclude because com.fasterxml.woodstox:woodstox-core should take precedence
    // however, stax2-api still lives on in the org.codehaus.woodstox group
    all*.exclude group: 'org.codehaus.woodstox', module: 'woodstox-core-asl'
    all*.exclude group: 'org.eclipse.jetty.orbit', module: 'javax.mail.glassfish'
    all*.exclude group: 'javax.el', module: 'javax.el-api'
    all*.exclude group: 'org.hibernate', module: 'hibernate-validator'
    // INTERLOK-3197 exclude old javax.mail
    all*.exclude group: 'com.sun.mail', module: 'javax.mail'
    all*.exclude group: 'javax.validation', module: 'validation-api'
    all*.exclude group: 'javax.activation', module: 'activation'
    all*.exclude group: 'javax.activation', module: 'javax.activation-api'
}


if (interlokVersion.endsWith("SNAPSHOT") || interlokUiVersion.endsWith("SNAPSHOT")) {
  allprojects {
    configurations.all {
      resolutionStrategy.cacheChangingModulesFor 15, "minutes"
    }
  }
}

repositories {
    mavenCentral() {
      content {
        excludeGroupByRegex "com\\.adaptris.*"
      }
    }
    if (localInterlokRepo != "unknown") {
      maven { url "$localInterlokRepo" }
    }
    maven { url "${nexusBaseUrl}/nexus/content/groups/public" }
    maven { url "${nexusBaseUrl}/nexus/content/groups/interlok" }
}

dependencies {
  interlokRuntime ("com.adaptris:interlok-core:$interlokVersion") { changing= true}
  interlokRuntime ("com.adaptris:interlok-common:$interlokVersion") { changing= true}
  interlokRuntime ("com.adaptris:interlok-boot:$interlokVersion") { changing=true }
  interlokRuntime ("com.adaptris:interlok-logging:$interlokVersion") { changing=true }
  interlokRuntime ("com.adaptris:interlok-varsub:$interlokVersion") { changing=true }

  interlokRuntime ("org.slf4j:slf4j-api:$slf4jVersion")
  interlokRuntime ("org.slf4j:jcl-over-slf4j:$slf4jVersion")
  interlokRuntime ("org.slf4j:jul-to-slf4j:$slf4jVersion")
  interlokRuntime ("org.apache.logging.log4j:log4j-core:$log4j2Version")
  interlokRuntime ("org.apache.logging.log4j:log4j-1.2-api:$log4j2Version")
  interlokRuntime ("org.apache.logging.log4j:log4j-slf4j-impl:${log4j2Version}")
  interlokRuntime ("org.apache.logging.log4j:log4j-api:$log4j2Version")
  interlokRuntime ("com.sun.mail:jakarta.mail:1.6.5")
  interlokRuntime ("com.sun.activation:jakarta.activation:2.0.0")
  interlokRuntime ("jakarta.validation:jakarta.validation-api:2.0.2")

  interlokTestRuntime ("com.adaptris:interlok-service-tester:$interlokVersion") { changing=true }
  interlokWar  ("com.adaptris.ui:interlok:$interlokUiVersion@war") {changing=true}

  interlokVerify files("$interlokTmpConfigDirectory"){
      builtBy 'localizeConfig'
  }
  interlokJavadocs group: "com.adaptris", name: "interlok-core", version: "$interlokVersion", classifier: "javadoc", changing: true, transitive: false
  interlokJavadocs group: "com.adaptris", name: "interlok-common", version: "$interlokVersion", classifier: "javadoc", changing: true, transitive: false

  interlokVerifyReport("com.adaptris.labs:interlok-verify-report:2.0.0")

  antJunit ("org.apache.ant:ant-junit:1.10.9")
}

task localizeConfig(type: Copy) {
    from "${interlokSourceConfig}"
    into "${interlokTmpConfigDirectory}"
    doLast {
        overwriteWithTemplate("log4j2.xml", "${interlokTmpConfigDirectory}")
        additionalTemplatedConfiguration.each {
          overwriteWithTemplate("${it}", "${interlokTmpConfigDirectory}")
        }
        overwriteWithPropertiesTemplate("variables-local", "${interlokTmpConfigDirectory}")
        additionalTemplatedProperties.each {
          overwriteWithPropertiesTemplate("${it}", "${interlokTmpConfigDirectory}")
        }
        ant.propertyfile(
            file: "${interlokTmpConfigDirectory}/version.properties") {
            entry( key: "build.version", value: "${version}")
            entry( key: "interlok.core.version", value: "${interlokVersion}")
            entry( key: "interlok.war.version", value: "${interlokUiVersion}")
        }
    }
}

task getServiceTestLog4j2 (){
  group 'Verification'
  description 'Get service test log4j2.xml'
  outputs.file new File(interlokTmpServiceTestLog4j)
  doLast {
    mkdir(new File(interlokTmpServiceTestLog4j).getParentFile())
    ant.get(src: serviceTestLog4j, dest: interlokTmpServiceTestLog4j, usetimestamp: 'true', quiet: 'true')
  }
}

tasks.register("verifyLauncherJar", Jar) {
    ext.verifyLauncherClasspath = { ->
      def verifyLibs = [configurations.interlokRuntime.collect { asFileUrl(it.getCanonicalPath()) }.join(' '),
              configurations.interlokVerify.collect { asFileUrl(it.getCanonicalPath()) + "/" }.join(' ')]
      return verifyLibs.join(' ')
    }
    appendix = "verify-launcher"
    manifest {
        attributes ("Class-Path": verifyLauncherClasspath())
    }
}

def interlokVersionReport = tasks.register("interlokVersionReport", JavaExec) {
    group = 'Verification'
    description = 'Show Interlok versions using -version'
    workingDir = new File("${buildDir}/tmp")
    classpath = files(verifyLauncherJar.archivePath)

    main = 'com.adaptris.core.management.SimpleBootstrap'
    args "-version"
}

interlokVersionReport.configure {
    dependsOn localizeConfig, verifyLauncherJar
}

def interlokVerify = tasks.register("interlokVerify", JavaExec) {
    group = 'Verification'
    description = 'Check if Interlok config is valid using -configtest'
    doFirst {
      if(new File("$interlokTmpConfigDirectory/log4j2.xml").exists()) {
        ant.move file: "$interlokTmpConfigDirectory/log4j2.xml", tofile: "$interlokTmpConfigDirectory/log4j2.xml.bk"
      }
    }
    workingDir = new File("${buildDir}/tmp")
    classpath = files(verifyLauncherJar.archivePath)
    main = 'com.adaptris.core.management.SimpleBootstrap'
    args "-configtest"
    environment loadPropertiesFromFile(interlokVerifyEnvironmentPropertiesFile)
    environment project.hasProperty('interlokVerifyEnvironmentProperties') ? project.getProperty('interlokVerifyEnvironmentProperties') : [:]
    systemProperties project.hasProperty('interlokVerifySystemProperties') ? project.getProperty('interlokVerifySystemProperties') : [:]
    systemProperty "interlok.logging.url", verifyLog4j
    standardOutput = new ByteArrayOutputStream()
    doLast {
      def verifyOutput = standardOutput.toString()
      def warningsCount = verifyOutput.readLines().size()
      def reportFile = new File(interlokVerifyTextReport)
      mkdir(reportFile.getParentFile())
      reportFile.createNewFile()
      verifyOutput.eachLine {
        reportFile.append("CODE_SMELL,INFO," + it + "\n")
      }
      if (warningsCount > 0) {
        println "\nConfiguration warnings [$warningsCount]:"
        print verifyOutput
        if(verifyMode == VerifyModes.STRICT) {
          throw new GradleException("Interlok Verify contains warnings [$warningsCount]")
        }
      }
      if(new File("$interlokTmpConfigDirectory/log4j2.xml.bk").exists()) {
        ant.move file: "$interlokTmpConfigDirectory/log4j2.xml.bk", tofile: "$interlokTmpConfigDirectory/log4j2.xml"
      }
    }
}

def interlokVerifyReport = tasks.register("interlokVerifyReport", JavaExec) {
    group = 'Test'
    description = 'Create Interlok verify test reports'
    onlyIf{
      interlokVerify.get().didWork && new File(interlokVerifyTextReport).exists()
    }
    main = 'com.adaptris.labs.verify.CreateVerifyReport'
    classpath = configurations.interlokVerifyReport
    args "--reportFile"
    args interlokVerifyTextReport
    args "--outputFile"
    args interlokVerifySonarReport
}

interlokVerify.configure {
    dependsOn localizeConfig, verifyLauncherJar
    finalizedBy interlokVerifyReport
}

tasks.register("serviceTesterLauncherJar", Jar) {
    appendix = "service-tester-launcher"
    ext.serviceTesterClasspath = { ->
      def testerLibs = [configurations.interlokRuntime.collect { asFileUrl(it.getCanonicalPath()) }.join(' '),
              configurations.interlokTestRuntime.collect { asFileUrl(it.getCanonicalPath()) }.join(' '),
              asFileUrl(new File(interlokTmpServiceTestLog4j).getParentFile().getCanonicalPath()) + "/"]
      return testerLibs.join(' ')
    }
    manifest {
        attributes ("Class-Path": serviceTesterClasspath())
    }
}

def interlokServiceTest = tasks.register("interlokServiceTest", JavaExec) {
    group = 'Test'
    description = 'Execute Interlok service tests'
    onlyIf {
      new File("$projectDir/src/test/interlok/service-test.xml").exists()
    }
    main = 'com.adaptris.tester.runners.TestExecutor'
    classpath = files(serviceTesterLauncherJar.archivePath)
    args "-serviceTest"
    args "$projectDir/src/test/interlok/service-test.xml"
    args "-serviceTestOutput"
    args "$buildDir/reports/unit/"
}

interlokServiceTest.configure {
    dependsOn getServiceTestLog4j2, serviceTesterLauncherJar
    finalizedBy interlokServiceTestReport
}

task interlokServiceTestReport {
    group = 'Test'
    description = 'Create Interlok service test reports'
    onlyIf{
      interlokServiceTest.get().didWork
    }
    doLast {
      mkdir "$buildDir/reports/html"
      ant.taskdef(
        name: 'junitreport',
        classname: 'org.apache.tools.ant.taskdefs.optional.junit.XMLResultAggregator',
        classpath: configurations.antJunit.asPath
      )

      ant.junitreport(todir: "$buildDir/reports/html") {
        fileset(dir: "$buildDir/reports/unit", includes: 'TEST-*.xml')
        report(todir: "$buildDir/reports/html", format: "frames"	)
      }
    }
}

task serviceTesterDist(type: Copy) {
  onlyIf {
    buildDetails.isDevMode()
  }
  from project.configurations.interlokTestRuntime
  into interlokTmpLibDirectory
}

task interlokWarDist(type: Copy) {
  onlyIf {
    buildDetails.isIncludeWar()
  }
  from project.configurations.interlokWar
  into interlokTmpWarDirectory
}

distributions {
    main {
        contents {
            into('') {
                from ("src/main/interlok")
                exclude "config"
            }
            into('config') {
                from(localizeConfig)
            }
            into('lib') {
                from(project.configurations.interlokRuntime)
                from(serviceTesterDist)
            }
            into('webapps') {
                from(interlokWarDist)
            }
            into('docs/javadocs') {
              from(project.configurations.interlokJavadocs)
            }
            rename '(.*)-[0-9]+\\..*.jar', '$1.jar'
            rename '(.*)-[0-9]+\\..*.war', '$1.war'
            duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        }
    }
}

installDist {
    destinationDir = new File(interlokDistDirectory)
}

// dependencyCheckAnalyze {
//   onlyIf {
//     !buildDetails.isDevMode()
//   }
// }

dependencyCheck  {
  suppressionFiles= [ "https://raw.githubusercontent.com/adaptris/interlok/develop/gradle/owasp-exclude.xml" ]
  skipConfigurations = buildDetails.isIncludeWar() ? [ "interlokJavadocs", "interlokVerify", "interlokVerifyReport", "antJunit" ] : [ "interlokWar", "interlokJavadocs", "interlokVerify", "interlokVerifyReport", "antJunit" ]
  failBuildOnCVSS = 7
}

// check.dependsOn dependencyCheckAnalyze,interlokVerify,interlokServiceTest,interlokVersionReport
check.dependsOn interlokVerify,interlokServiceTest,interlokVersionReport
assemble.dependsOn installDist
